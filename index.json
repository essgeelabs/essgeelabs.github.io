[{"content":"I\u0026rsquo;ve worked with many different organisations and I\u0026rsquo;ve come across a few common items when it comes to LAN switches that I though I should document in the hope it will help others.\nOversubscription Network Hierarchy Most networkers know the below diagram as the network hierarchy made up of the core, distribution and access layers. But many don\u0026rsquo;t consider the oversubscription ratios when implementing the hierarchy.\nOversubscription is the aggregation ratio of the sum of the downlinks to the sum of the uplinks. The diagram below shows the recommended oversubscription ratios:\n Distribution to Core - 4:1 Access to Distribution - 20:1  A relatively standard ratio helps maintain predictability in network performance and experience. Although I know this is hard when many businesses keep switches forever sometimes and just add to it.\nModules Another oversubscription that is not considered is the internal switch ratios. This is especially notable in modular switches, where the speed that the module is connected to the backplane is less than the sum of the port speeds available.\nFor example the backplane speed may be 40Gbps, but the card module has 8 x 10Gbps ports. That\u0026rsquo;s 160Gbps throughput (8 ports x 10Gbps x 2 input/output) giving an oversubscription of 4:1.\nControllers Oversubscription in fixed configuration switches is generally not too much a problem. But consider the Cisco 3560G switch - it has 32Gbps switching backplane. With the 24-port configuration it has 24 + 2 Gigabit ports, but the 48-port configuration has 48 + 4 Gigabit ports.\nNewer switches have much faster backplanes though.\nAlso consider network controller placement in switches. Switches often look like the picture below. The ports are not segmented for aesthetics, or to make it easy to tell port numbers, but is often an indication of how the switch controllers are placed. Ports are not usually wired to utilise a single network controller, and the ports are split up between two or more controllers.\nI would often see people wire a switch and just start from the beginning starting with one, and you may have all first 12 ports filled, but the rest empty, except for the uplink port. It\u0026rsquo;s better to split the cables so 6 are in the first half and the rest are in the second half.\nRoot bridges and daisy chains Too many places I\u0026rsquo;ve been where they just hook switches up as they need to without any thought about the topology. And I mean even in places with a mature IT department. I\u0026rsquo;m not a fan of daisy chaining switches - I much rather switch stacks - but I do understand them to be necessary in many cases.\nIf you are deciding to daisy chain switches, especially if you are including redundant paths, ensure that you specify the root bridge in the topology. I see many places where they just install the switches and have no clue what is the root bridge.\nConsider the case where switches are connected in a way where the root bridge is at the far left corner. The paths that are forwarding are shown in green and is one possible converged spanning tree.\nNow consider where the main switch off the router is configured as the root bridge.\nThe paths to the main switch is drastically different. It doesn\u0026rsquo;t look so bad in this illustration, but consider cases where there are two dozen or more switches in the topology; it can get nasty.\nDiameter issues Another important aspect about choosing the root bridge is the diameter of the bridge network, which is how far away switches are from each other. The maximum diameter between two switches is seven hops away from each other. A switch will discard the bridge protocol data unit (BPDU) if it exceeds the diameter (in actuality the maximum age). If the root bridge is far away, then the BPDU can be discarded and the spanning tree will not converge.\nLuckily, I\u0026rsquo;ve never seen this happen in my lifetime. And I have to say it\u0026rsquo;s luck because I\u0026rsquo;ve seen some really wild topologies. But I have read stories, so it\u0026rsquo;s one of the few reasons I shy away from daisy chains.\nSpanning Tree load sharing Considering the images above, note that some of the redundant paths are in a blocking state. It means those links are essentially unused. All modern switches come with Per VLAN Spanning Tree used by default, which means there is a spanning tree instance for every VLAN specified.\nThis can be done by modifying the spanning tree cost of the interfaces of the switches connected to the root bridge. This way you can send some VLANs on one path, and the others on the next path. This takes some planning, and not to mention management going forward, but can have immense performance benefits considering the oversubscription points above.\n","permalink":"https://essgeelabs.com/posts/network-switching-tips/","summary":"In my experience I\u0026rsquo;ve noticed several things that many people don\u0026rsquo;t know about switches so I thought it wise to document some. I\u0026rsquo;ll be updating this when new things come to mind.","title":"Network Switching Tips"},{"content":"Yesterday I tried a git status on one of my repositories and got the error:\nfatal: unsafe repository (\u0026#39;C:/Users/sganpat/Website/essgeelab.net\u0026#39; is owned by someone else)\rTo add an exception for this directory, call:\rgit config --global --add safe.directory C:/Users/sganpat/Website/essgeelab.net This is linked to the fix for CVE-2022-24765 and CVE-2022-24767 and shows up after Git version 2.35.2.\nOne fix is to run the command:\ngit config --global --add safe.directory \u0026lt;directory of git repository\u0026gt; However, in my case, I needed to update the owner of the folder.\nRight-Click on the root folder of the repository in Windows Explorer and click on \u0026ldquo;Properties\u0026rdquo;.\nSelect the \u0026ldquo;Security\u0026rdquo; tab and click on \u0026ldquo;Advanced\u0026rdquo;.\nAt the \u0026ldquo;Owner\u0026rdquo; line, you should see someone other than yourself as the owner. Click on \u0026ldquo;Change\u0026rdquo;.\nSelect yourself as the owner and click \u0026ldquo;Ok\u0026rdquo;. Select \u0026ldquo;Replace owner on subcontainers and objects\u0026rdquo; and click \u0026ldquo;Ok\u0026rdquo; out of all the dialog boxes.\nNow Git should be working fine again in your repository. Try doing a git status.\nOn branch main\rYour branch is up to date with \u0026#39;origin/main\u0026#39;.\rnothing to commit, working tree clean ","permalink":"https://essgeelabs.com/posts/git-unsafe-repository/","summary":"What to do when you get the error \u0026ldquo;fatal: unsafe repository (\u0026lt;repo directory is owned by someone else)\u0026rdquo;","title":"Git Unsafe Repository"},{"content":"I mentioned in my last post about using cPanel Git Version Control to allow the deploying of a static website. I did that because I had started to look some time ago at static website generators.\nThe conception For most of my online web-publishing life I\u0026rsquo;ve been using WordPress. Before that, I used to create static web pages by writing HTML in a text editor (I can\u0026rsquo;t remember which one) and hosted on the now defunct theglobe.com.\nI really like WordPress. It makes blogging easy and it\u0026rsquo;s very well supported with tons of plugins and themes to choose from to customise the look at feel of your site. It was through WordPress that I really took up blogging and learning about CSS, PHP and MySQL.\nBut WordPress was a pain to keep updating. And when it came to changing the theme, it was a chore. I would build a staging environment on my computer, but there was no way to transfer that exactly as is to the production site. I would copy the theme across, with images and plugins, then add back the widgets as needed. Sometimes a backup and restore would work, but that was not guaranteed.\nSo I started to look for a different way, and that\u0026rsquo;s how I found static website generators.\nStatic Website Generators Static Website Generators does just what its name implies - generates a static website.\nStatic website generators uses templates to generate entire websites composes only of the HTML, CSS and JavaScript files. This means that sites can run faster, and more securely because there\u0026rsquo;s no application running in the backend to render the pages.\nIt also means that I could easily run an entire CI/CD pipeline for any type of changes to the website, whether it\u0026rsquo;s adding posts, pages, or even changing the theme.\nThere are a quite a few static website generators out there such as:\n Jekyll Gatsby Pelican Eleventy  Each has their own set of advantages all written in their own language such as Ruby (Jekyll), JS (Eleventy, Gatsby) or Python (Pelican).\nI opted to go with Hugo, which is a generator written in the Go programming language. Why? Hugo is fast, comes with its own set of binaries, very active community, and lots of themes to choose from. The last one is important because my front-end skill sucks.\nTo begin This is not a newbie tutorial. You should be comfortable with the command-line and understand how web server and web hosting works.\nLike my last post, you should have Git installed, which you can download from the Git website.\nYou can use any web editing tool that you would like. I use Visual Studio Code for most of my editing needs.\nAnd you need somewhere to host this. I use BlueHost, but there are other options out there. I want to move this site later to Netlify or a cloud host like my favourite, Digital Ocean.\nInstalling Hugo First thing to do is install Hugo. The easiest way to do this on Windows is to use Chocolatey.\nInstall Chocolatey and then, at the command or PowerShell prompt, install Hugo by running:\nchoco install hugo -confirm If you want a nice GUI to manage your Chocolatey packages, install the Chocolatey GUI by running:\nchoco install chocolateygui Then you can open the Chocolatey GUI from the Programs menu.\nAnd that\u0026rsquo;s it. Hugo is installed. You can check your Hugo version by typing:\nhugo version Building your first Hugo site At the command prompt, navigate to the location that you want to create your new site. This is not the location where you have the web files of your current website if you followed my last tutorial, and must be a new location.\nNow type:\nhugo new site \u0026lt;your new site name\u0026gt; e.g. hugo new site essgeelabs.net\nNow we\u0026rsquo;re going to add a theme to it. A theme gives the site the look and feel. You could create that from scratch by creating the layout and asset files, but why do that to yourself.\nYou can find Hugo themes by going to themes.gohugo.io. This site (at the time of writing) is using PaperMod, but for this example I\u0026rsquo;m going to use Mainroad.\nChange directory to the folder created with your new site\u0026rsquo;s name. Now we\u0026rsquo;ll use Git to download the theme after first initialising Git.\ncd essgeelabs.net\rgit init\rgit submodule add --depth=1 https://github.com/vimux/mainroad.git themes/mainroad The last command initialises the theme as a submodule in the repository into the themes/mainroad directory. The parameter depth=1 is not necessary, but it reduces the size of the repository by only downloading up to the last commit.\nNow add theme = \u0026quot;mainroad\u0026quot; to the config.toml file.\necho \u0026#39;theme = \u0026#34;mainroad\u0026#34;\u0026#39; \u0026gt;\u0026gt; .\\config.toml The config.toml file holds configuration information for the site. The file can also be YAML or JSON based. I prefer YAML myself, but for this example we\u0026rsquo;ll continue using TOML as it\u0026rsquo;s the default. You can use a TOML to YAML converter if you wish to switch as well. You will need to delete the config.toml file if you do wish to use config.yaml, as the TOML file is higher in priority.\nNow your site is ready for some content.\nAdd some content At this point you\u0026rsquo;re ready to add some content to your site. At the command-line enter:\nhugo new posts/first-post.md This will create a file first-post.md in the folder posts in the folder content. The .md extension means that it\u0026rsquo;s as Markdown file and uses markdown syntax for formatting. It takes getting a little used to, but once you learn the basic syntax you\u0026rsquo;ll really like using it.\nOpen the file first-post.md in an editor like Visual Studio Code, which I use. You will see:\n---\rtitle: \u0026#34;First Post\u0026#34;\rdate: 2022-04-23T14:36:21-04:00\rdraft: true\r--- This is called the Front Matter, and it holds metadata about the page and the contents. In this case the front matter is written in YAML format.\nThe created page provides:\n The title. The date it was written. This will appear as the posted date, so change this as necessary. If this page is a draft. Draft pages are not generated.  Using the hugo new command creates a page with the defined front matter information. The theme may provide other options and a template can be customised with these, but this is beyond the scope of this tutorial.\nNow add some content after the front matter and below the last ---, which is the YAML delimiter. For example:\nI\u0026#39;m using Hugo to build my new website. Hugo is awesome. Save the file.\nUse the built-in web server to preview your page Hugo has an internal web server that you can use to view the config. At the command-line type:\nhugo server -D The -D means to also show drafts.\nYou should get:\nStart building sites … hugo v0.97.3-078053a43d746a26aa3d48cf1ec7122ae78a9bb4 windows/amd64 BuildDate=2022-04-18T17:22:19Z VendorInfo=gohugoio\r| EN -------------------+-----\rPages | 10\rPaginator pages | 0\rNon-page files | 0\rStatic files | 5\rProcessed images | 0\rAliases | 4\rSitemaps | 1\rCleaned | 0\rBuilt in 69 ms\rWatching for changes in C:\\Users\\sganpat\\Website\\essgeelabs.net\\{archetypes,content,data,layouts,static,themes}\rWatching for config changes in C:\\Users\\sganpat\\Website\\essgeelabs.net\\config.toml\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from memory\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop Now in your favourite web browser go to http://localhost:1313/ and you should see this:\nThis page is regenerated for any change you make to the file. Try it.\nConfigure the site Before you generate the site for your public site, you should customise the information. As you can see from the screenshot your site name is showing as \u0026ldquo;My New Hugo Site\u0026rdquo;. Let\u0026rsquo;s change that.\nOpen the config.toml file in your editor. You should see:\nbaseURL = \u0026#39;http://example.org/\u0026#39;\rlanguageCode = \u0026#39;en-us\u0026#39;\rtitle = \u0026#39;My New Hugo Site\u0026#39;\rtheme = \u0026#34;mainroad\u0026#34; Change the baseURL to point to the domain of your website, e.g. https://www.essgeelabs.net/.\nChange the title to be the title that you want for your website, e.g. Example Homepage of Ess Gee Labs.\nYou can find all of Hugo configuration settings here.\nThe Mainroad theme has some of its own customisations that you can find on the theme page.\nMy config.toml file now looks like:\nbaseURL = \u0026#39;https://www.essgeelabs.net/\u0026#39;\rlanguageCode = \u0026#39;en-us\u0026#39;\rtitle = \u0026#39;Example Homepage of Ess Gee Labs\u0026#39;\rtheme = \u0026#34;mainroad\u0026#34; Customise the front matter for content pages More information can be added to the front matter of the content pages to provide more information.\nSome examples:\n description - provides a description of the content categories - used to categorise your contents tags - used to tag the content summary - provides the blurb you use to summarise your content. This is also used in list pages and RSS feeds.  See more of Hugo\u0026rsquo;s page specific settings here. You can find some information of Mainroad\u0026rsquo;s theme specific settings on the theme page.\nMy first page now looks like:\n---\rtitle: \u0026#34;First Post\u0026#34;\rdate: 2022-04-23T14:36:21-04:00\rdraft: true\rdescription: \u0026#39;The first post of the example site\u0026#39;\rsummary: \u0026#39;The journey of a thousand miles begins with a single step.\u0026#39;\rcategories:\r- News\rtags:\r- posts\r- Hugo\r---\rI\u0026#39;m using Hugo to build my new website. **Hugo** is awesome. Let\u0026rsquo;s see how it looks like using the Hugo server - hugo server -D\nWhen you click on the First Post, you get:\nYou could see the tags that we added. Nice.\nIt all looks good. Set draft: false on the page and now let\u0026rsquo;s generate the site.\nGenerate the site Generating the static pages is the easiest part of all. At the command-line run:\nhugo All the pages will be output by default into the public folder of the Hugo project folder.\nIf you followed my last tutorial on using Git with cPanel, you will move all the files from the public folder into the folder that you created for the website.\nCreate a .cpanel.yml file with the following contents:\n---\rdeployment:\rtasks:\r- export DEPLOYPATH=/home/essgeelab/public_html/essgeelabs.net/\r- /bin/cp -Rf categories $DEPLOYPATH\r- /bin/cp -Rf img $DEPLOYPATH\r- /bin/cp -Rf page $DEPLOYPATH\r- /bin/cp -Rf posts $DEPLOYPATH\r- /bin/cp -Rf tags $DEPLOYPATH\r- /bin/cp -Rf css $DEPLOYPATH\r- /bin/cp -Rf js $DEPLOYPATH\r- /bin/cp 404.html $DEPLOYPATH\r- /bin/cp favicon.ico $DEPLOYPATH\r- /bin/cp apple-touch-icon.png $DEPLOYPATH\r- /bin/cp index.html $DEPLOYPATH\r- /bin/cp index.xml $DEPLOYPATH\r- /bin/cp sitemap.xml $DEPLOYPATH\r- /bin/cp style.css $DEPLOYPATH Now add and commit the files, then push to the webserver.\ngit add *\rgit commit -m \u0026#39;New Hugo site\u0026#39;\rgit push Your site should now be live!\n","permalink":"https://essgeelabs.com/posts/hugo-blog-1/","summary":"This is the first time I\u0026rsquo;m using Hugo so I made a little tutorial to help others.","title":"Building a blog with Hugo"},{"content":"In getting this website up and running I wanted a way to simplify updating the site from the command line to open opportunities for automation.\nFor this I wanted to be able to use Git to be able to mock up a website and then push the changes to the webhost once I was satisfied. So I was pleasantly surprised to find out that cPanel supports the use of Git repositories to do just that.\ncPanel is a web application that many web hosting providers use to allow customers to self-manage the backend of their websites.\nAll my examples here is based on Bluehost, who I use as my webhost. I\u0026rsquo;m also using Windows 10 but the techniques will work with other OSes.\nTo begin This is not a newbie tutorial. You should be comfortable with the command-line and understand how web server and web hosting works.\nYou should have Git installed. You can download from the Git website.\nYou can use any web editing tool that you would like. Remember that this would be a static website as compared to a dynamic website. I use Visual Studio Code for most of my editing needs.\nYou\u0026rsquo;ll need SSH key pairs. Generate them if you don\u0026rsquo;t already have one.\nAnd of course you need a web host that use cPanel with Git Version Control and a domain attached. I\u0026rsquo;m using an addon domain, but this will work for the main domain as well.\nAdd your SSH public key to the web host Log into your web host and in cPanel go to Security, and click on SSH Access. (In Bluehost you have to go to Advanced first.)\nClick on \u0026ldquo;Manage SSH Keys\u0026rdquo;\nThen click on \u0026ldquo;Import Key\u0026rdquo;.\nSpecify a name for the key and paste in the public key only. Then click on \u0026ldquo;Import\u0026rdquo;. Note that I can share my public key without fear of being compromised, which is the advantage of public-private key pairs.\nYou should see the new key in the \u0026ldquo;Public Keys\u0026rdquo; list. Click on \u0026ldquo;Manage\u0026rdquo; in the line with the key.\nNow click on \u0026ldquo;Authorize\u0026rdquo;. You should get a message saying that they key has been authorised.\nWhen you go back to the Public Key list you should see the \u0026ldquo;Authorization Status\u0026rdquo; of the key as \u0026ldquo;authorized\u0026rdquo;.\nCreate your Git Repository to cPanel Back to cPanel, go to \u0026ldquo;Files\u0026rdquo; and \u0026ldquo;Git Version Control\u0026rdquo;.\nWe\u0026rsquo;ll be creating a new repository. Click \u0026ldquo;Create\u0026rdquo;.\nIn the \u0026ldquo;Create Repository\u0026rdquo; window, disable the \u0026ldquo;Clone a Repository\u0026rdquo; toggle. This is only if you have an existing website hosted in another Git repository such as GitHub. We will be creating an empty repository.\nEnter the repository path. I created a folder for my repositories, and you should do the same. This is not the folder that is used to store your web pages (usually the ~/public_html or ~/www folders). You\u0026rsquo;ll see how to get the files in the correct location after.\nEnter a name for the repository.\nThen click on \u0026ldquo;Create\u0026rdquo;.\nYou should see a message that it was created successfully along with some instructions to add the repository to an existing project, or to clone the repository and build a new project. Copy and save these instructions.\nYour repository should now be listed into your list of repositories.\nEdit the SSH config Since the cPanel Git uses SSH to access the repository, you need to edit the SSH config file to point to your SSH private key file.\nGo to your home folder.\nIn Windows it\u0026rsquo;ll be something like:\nC:\\Users\\\u0026lt;username\u0026gt;\\\nIn Linux it\u0026rsquo;ll be:\n\\home\\\u0026lt;username\u0026gt;\\ or just ~\\\nYou\u0026rsquo;ll see a .ssh folder, if not, create it. Edit or create a text file named \u0026ldquo;config\u0026rdquo; with no extension (no .txt or anything).\nAdd the following to the file:\nHost \u0026lt;domain name\u0026gt;\rHostKeyAlgorithms +ssh-rsa\rPubkeyAcceptedKeyTypes +ssh-rsa\rUser \u0026lt;username to access web host\u0026gt;\rIdentityFile \u0026#34;\u0026lt;full path to private key e.g. c:\\keys\\private.key\u0026#34;\rPort 22 Save and close.\nClone the Git repository to your local computer Once you have Git installed, you can clone the repository to your local computer. In this example we\u0026rsquo;re cloning and not using an existing copy of a web site.\nYou can copy the Clone URL from the cPanel Git Version Control list.\nOpen a command or PowerShell prompt and navigate to the place where you would like to clone the repository.\nPS C:\\Users\\sganpat\\Website\u0026gt; git clone ssh://\u0026lt;username\u0026gt;@essgeelabs.net/home/essgeelab/repositories/essgeelab.net\rCloning into \u0026#39;essgeelab.net\u0026#39;...\rwarning: You appear to have cloned an empty repository. cd essgeeglab.net Create a Readme file to do an initial commit and push.\necho \u0026#34;# Readme\u0026#34; \u0026gt;\u0026gt; README.md\rgit add README.md\rgit commit -m \u0026#34;initial commit\u0026#34;\rgit push -u origin master You should get output like:\nEnumerating objects: 3, done.\rCounting objects: 100% (3/3), done.\rWriting objects: 100% (3/3), 216 bytes | 108.00 KiB/s, done.\rTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\rremote: Recieved update on checked-out branch, queueing deployment.\rremote: ---\rremote: apiversion: 3\rremote: func: create\rremote: module: VersionControlDeployment\rremote: result:\rremote: data: ~\rremote: errors: ~\rremote: messages: ~\rremote: metadata: {}\rremote:\rremote: status: 1\rremote: warnings: ~\rTo ssh://essgeelabs.net/home/essgeelab/repositories/essgeelab.net\r\\* [new branch] master -\u0026gt; master Great. All is setup to now push your website.\nCreate a small web page and deploy Create a simple static web page and associated files such as stylesheets and images and add them to the repository. For this example I\u0026rsquo;m using a simple page (download).\nPS C:\\Users\\sganpat\\Website\\essgeelab.net\u0026gt; git status\rOn branch master\rYour branch is up to date with \u0026#39;origin/master\u0026#39;.\rUntracked files:\r(use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed)\rimages/\rindex.html\rstyle.css\rnothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track)\rPS C:\\Users\\sganpat\\Website\\essgeelab.net\u0026gt; git add *\rPS C:\\Users\\sganpat\\Website\\essgeelab.net\u0026gt; git commit -m \u0026#34;simple website\u0026#34;\r[master 5498e9e] simple website\r4 files changed, 197 insertions(+)\rcreate mode 100644 images/egllogo.png\rcreate mode 100644 images/twitter.png\rcreate mode 100644 index.html\rcreate mode 100644 style.css\rPS C:\\Users\\sganpat\\Website\\essgeelab.net\u0026gt; git push origin master\rEnumerating objects: 8, done.\rCounting objects: 100% (8/8), done.\rDelta compression using up to 8 threads\rCompressing objects: 100% (7/7), done.\rWriting objects: 100% (7/7), 15.86 KiB | 3.96 MiB/s, done.\rTotal 7 (delta 0), reused 0 (delta 0), pack-reused 0\rremote: Recieved update on checked-out branch, queueing deployment.\rremote: ---\rremote: apiversion: 3\rremote: func: create\rremote: module: VersionControlDeployment\rremote: result:\rremote: data: ~\rremote: errors: ~\rremote: messages: ~\rremote: metadata: {}\rremote:\rremote: status: 1\rremote: warnings: ~\rTo ssh://essgeelabs.net/home/essgeelab/repositories/essgeelab.net\rb295c0c..5498e9e master -\u0026gt; master Great, you\u0026rsquo;ve added the site to the repository. But when you browse to the URL it doesn\u0026rsquo;t work. That\u0026rsquo;s because it needs to be deployed. To do this, you need to create a text file called .cpanel.yml and add your deploy tasks in there. These are the bash commands you would run to deploy the site from the repository folder.\nFor instance, in my case it would be to copy the index.html and style.css files and the images folder to the root directory of the web server. So my .cpanel.yml file will look like:\n---\rdeployment:\rtasks:\r- export DEPLOYPATH=/home/essgeelab/public_html/essgeelabs.net/\r- /bin/cp index.html $DEPLOYPATH\r- /bin/cp style.css $DEPLOYPATH\r- /bin/cp -R images $DEPLOYPATH now commit that file and push to the remote respository.\ngit add .cpanel.yml\rgit commit -m \u0026#34;cpanel deploy file\u0026#34;\rgit push origin master Now the website should be operational.\n","permalink":"https://essgeelabs.com/posts/cpanel-git-1/","summary":"Configuing cPanel Git Versioning for Web Site deployment","title":"Using Git with cPanel to update your website"},{"content":"Welcome I\u0026rsquo;ve been meaning to put up a website like this for a really long time, but never got around to doing it. While I have by personal and business website, I\u0026rsquo;ve never put up a technical one.\nThe truth is that even with over two decades of experience, I still feel that what I have to offer is not enough. That whatever I say is going to sound stupid or is not valuable. Which is weird because I know many people value my input in things.\nImposter syndrome is a heck of a thing.\nWhat to expect At the home page says, I\u0026rsquo;m using this site to document some of the things that I\u0026rsquo;m learning and experimenting with. I\u0026rsquo;ll also add information that I\u0026rsquo;ve found useful in my day-to-day activities as a network and infrastructure engineer/manager.\nTopics in my head:\n - DevOps, DevSecOps and CyberSecurity\n - Network and Infrastructure Architectures\n - Machine Learning and Intelligence Augmentation\n - Electronics and The Internet of Things\n - Web Development and Programming in Python\nI expect this to be very broad and varied so the SEO might be shit. But I hope it helps someone.\nWhy put up this site? The main aim of the site is to share my knowledge and help others who are trying to do the same thing I am doing.\nBut why do this when there are tons of sites out there doing the same?\nBecause if you\u0026rsquo;re like me, you\u0026rsquo;ve found that even going through those sites don\u0026rsquo;t help all the time and you end up figuring out things on your own or by putting the pieces together. Here I hope you find all the pieces in one place.\nBut more so, I want to hold myself accountable in actually doing the things I put in the list.\nI hope you enjoy the journey with me. Reach out to me via my social handles\n","permalink":"https://essgeelabs.com/posts/first-post/","summary":"I\u0026rsquo;ve been meaning to put up a technical website like this for a really long time. Time to make things happen.","title":"First Post"},{"content":"This is a little about me.\n","permalink":"https://essgeelabs.com/about/","summary":"This is a little about me.","title":"About"}]